/**
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client\'s commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don\'t break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.50) is used. For example, calling `/info` is the same as calling `/v1.52/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means the server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * OpenAPI spec version: 1.52
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ContainerSummaryHealth } from '../models/ContainerSummaryHealth';
import { ContainerSummaryHostConfig } from '../models/ContainerSummaryHostConfig';
import { ContainerSummaryNetworkSettings } from '../models/ContainerSummaryNetworkSettings';
import { MountPoint } from '../models/MountPoint';
import { OCIDescriptor } from '../models/OCIDescriptor';
import { PortSummary } from '../models/PortSummary';

export class ContainerSummary {
    /**
    * The ID of this container as a 128-bit (64-character) hexadecimal string (32 bytes).
    */
    'id'?: string;
    /**
    * The names associated with this container. Most containers have a single name, but when using legacy \"links\", the container can have multiple names.  For historic reasons, names are prefixed with a forward-slash (`/`).
    */
    'names'?: Array<string>;
    /**
    * The name or ID of the image used to create the container.  This field shows the image reference as was specified when creating the container, which can be in its canonical form (e.g., `docker.io/library/ubuntu:latest` or `docker.io/library/ubuntu@sha256:72297848456d5d37d1262630108ab308d3e9ec7ed1c3286a32fe09856619a782`), short form (e.g., `ubuntu:latest`)), or the ID(-prefix) of the image (e.g., `72297848456d`).  The content of this field can be updated at runtime if the image used to create the container is untagged, in which case the field is updated to contain the the image ID (digest) it was resolved to in its canonical, non-truncated form (e.g., `sha256:72297848456d5d37d1262630108ab308d3e9ec7ed1c3286a32fe09856619a782`).
    */
    'image'?: string;
    /**
    * The ID (digest) of the image that this container was created from.
    */
    'imageID'?: string;
    'imageManifestDescriptor'?: OCIDescriptor;
    /**
    * Command to run when starting the container
    */
    'command'?: string;
    /**
    * Date and time at which the container was created as a Unix timestamp (number of seconds since EPOCH).
    */
    'created'?: number;
    /**
    * Port-mappings for the container.
    */
    'ports'?: Array<PortSummary>;
    /**
    * The size of files that have been created or changed by this container.  This field is omitted by default, and only set when size is requested in the API request.
    */
    'sizeRw'?: number | null;
    /**
    * The total size of all files in the read-only layers from the image that the container uses. These layers can be shared between containers.  This field is omitted by default, and only set when size is requested in the API request.
    */
    'sizeRootFs'?: number | null;
    /**
    * User-defined key/value metadata.
    */
    'labels'?: { [key: string]: string; };
    /**
    * The state of this container. 
    */
    'state'?: ContainerSummaryStateEnum;
    /**
    * Additional human-readable status of this container (e.g. `Exit 0`)
    */
    'status'?: string;
    'hostConfig'?: ContainerSummaryHostConfig;
    'networkSettings'?: ContainerSummaryNetworkSettings;
    /**
    * List of mounts used by the container.
    */
    'mounts'?: Array<MountPoint>;
    'health'?: ContainerSummaryHealth;
}

export enum ContainerSummaryStateEnum {
    Created = 'created',
    Running = 'running',
    Paused = 'paused',
    Restarting = 'restarting',
    Exited = 'exited',
    Removing = 'removing',
    Dead = 'dead'
}

